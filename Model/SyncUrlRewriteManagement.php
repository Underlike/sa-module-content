<?php

namespace Sa\Content\Model;

use Magento\Framework\App\ResourceConnection;
use Sa\Content\Helper\Api as ApiHelper;

class SyncUrlRewriteManagement implements \Sa\Content\Api\SyncUrlRewriteManagementInterface
{
	protected $_resourceConnection;
	protected $_apiHelper;

    public function __construct(
        ResourceConnection $resourceConnection,
        ApiHelper $apiHelper
    ) {
        $this->_resourceConnection = $resourceConnection;
        $this->_apiHelper = $apiHelper;
    }

    /**
     * {@inheritdoc}
     */
    public function postSyncUrlRewrite($slug)
    {
        if ($this->_apiHelper->getPage($slug)) {
            if ($this->generateUrlRewrite($slug)) {
                return true;
            }
        }

        return false;
    }

    public function generateUrlRewrite($slug)
    {
        $connection = $this->_resourceConnection->getConnection();

        $sql = "SELECT * FROM `url_rewrite` WHERE `request_path` = :requestPath";
        $url = $connection->fetchOne($sql, [
            'requestPath' => 'page/' . $slug
        ]);

        if (!$url) {
            $sql = "INSERT INTO `url_rewrite` (`entity_type`, `request_path`, `target_path`, `redirect_type`, `store_id`, `description`, `is_autogenerated`, `metadata`) ";
            $sql .= "VALUES (:entityType, :requestPath, :targetPath, :redirectType, :storeId, :description, :isAutogenerated, :metadata);";

            if($connection->query($sql, [
                'entityType' => 'sa-content',
                'requestPath' => 'page/' . $slug,
                'targetPath' => 'sacontent/index/page/slug/' . $slug,
                'redirectType' => 0,
                'storeId' => 1,
                'description' => null,
                'isAutogenerated' => 1,
                'metadata' => null
            ])) {
                return true;
            }
        }

        return false;
    }
}